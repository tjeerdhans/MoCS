@using System.Data.Entity.Validation
@using System.Web.UI.WebControls
@using MoCS.Web.Code
@model System.Web.Mvc.HandleErrorInfo

@{
    if (Model != null && Model.Exception.GetType() == typeof(MoCSHttpException))
    {
        Response.StatusCode = ((MoCSHttpException)Model.Exception).HttpCode;
    }
    <h1>@Response.Status</h1>
    ViewBag.Title = Response.StatusCode;
}

<h2 class="text-danger">Oops, something happened on the way to heaven.</h2>

@if (Model != null)
{

    <h4>This might help: <em> @Model.Exception.Message</em></h4>

    if (User.IsInRole("Admin"))
    {
        <hr />
        <h3>Tech stuff</h3>
        var exception = Model.Exception;
        while (exception != null)
        {
            <div style="border: 1px solid black;">
                @exception.Message <br />
                @exception.StackTrace
            </div>
            if ((exception as DbEntityValidationException) != null)
            {
                <h4>Entity validation errors</h4>
                var entityValidationException = exception as DbEntityValidationException;
                foreach (var validationError in entityValidationException.EntityValidationErrors.SelectMany(e => e.ValidationErrors))
                {
                    <div style="border: 1px solid red;">
                        @validationError.PropertyName: @validationError.ErrorMessage
                    </div>
                }

            }
            exception = exception.InnerException;
        }
    }
}